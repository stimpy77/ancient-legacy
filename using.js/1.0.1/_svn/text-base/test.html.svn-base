<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
		<title>using.js basic test</title>
		<script language="JavaScript" type="text/javascript" src="using.js"></script>
		<script language="JavaScript" type="text/javascript">
			using.register('hello', 
				'helloworld.js'
				);
			using.register('hello2', 
				'helloworld2.js'
				);
			using.register('moo', 
				"async", 500, // async needed cause I'm gonna be fetching moo tools from another domain
				'http://cachefile.net/scripts/mootools/1.11/mootools_full_1.11_packed.js'
				);
			using.register('multi', 
				'dep1.js',
				'dep2.js'
				);

		</script>
	</head>
	<body>
		<h3>using.js</h3>
		<p>
			Author: Jon Davis &lt;jon@jondavis.net>
		</p>
		<p>The blog page that explains using.js is here: <a href="http://www.jondavis.net/blog/post/2008/04/Javascript-Introducing-Using-(js).aspx">http://www.jondavis.net/blog/post/2008/04/Javascript-Introducing-Using-(js).aspx</a></p>
		<p>
			This is a quick and dirty test of using.js. The 
			<a href="using.js" style="font-size: 1.2em;">using.js</a> (4kb) script 
			allows you specify a dependency script with its source URL for 
			a particular feature so that it can be late-loaded, but it 
			will not re-load the source twice. There is <b><i>no dependency</i></b>
			upon other script libraries like jQuery to get started with using.js.
		</p>
		<p>
			The callback function will try to wait a bit for the referenced script
			to load. The callback is truly synchronous (no wait) or the delay is set using 
			<tt>using.wait=<i>[milliseconds]</i>;</tt>. You can reference
			scripts on different domains by setting the global <tt>using.wait</tt> 
			property, or by declaring the URIs as external URIs by passing <tt>true</tt>
			and/or an optional post-load milliseconds parameter before each URL, i.e.<br />
			<tt>using.register(true, 750, 'http://cachefile.net/scripts/jquery/1.2.3/jquery-1.2.3.js');</tt>.
		</p>
		<p>
			The URL parameter in <tt>using.register()</tt>can take several URLs, not just one, as 
			additional (third, fourth, ..) parameters to the using.register() function.
		</p>
		<p>You do not need a callback function when calling using() if you just want to 
			make sure the referenced script is loaded. <tt>using('jquery');</tt> works fine
			as long as it has been pre-registered.</p>
		<p>The big advantage of using.js is that you can manage one source script
			that does nothing but register a big list of script files by name, then 
			in a larger web client app you can reference using.js and the registrations
			script and then have all you need for your app.</p>
		<p>
			Test: Click on the buttons below more than once:
		</p>
		<button onclick="using('hello', function() {alert(window.hello_isLoaded());}); ">helloworld.js</button>
		<button onclick="using('hello2');">no callback</button>
		<button onclick="document.body.style.cursor='busy';using('moo', function() {alert('moo! .. random: ' + $random(1,5));document.body.style.cursor='default';});">moo tools</button>
		<button onclick="using('multi', function() {alert('dep1: ' + window.dep1 + ', dep2: ' + window.dep2);});">multiple dependencies</button>
		<p>Source code:</p>
	<div style="border: outset 2px gray">
			<blockquote>
				<pre>&lt;html>
	&lt;head>
		&lt;script language="JavaScript" type="text/javascript" src="using.js">&lt;/script>
		&lt;script language="JavaScript" type="text/javascript">
		using.register('hello', 
			'helloworld.js'
			);
		using.register('hello2', 
			'helloworld2.js'
			);
		using.register('moo', 
			true, 500, // async needed cause I'm gonna be fetching moo tools from another domain
			'http://cachefile.net/scripts/mootools/1.11/mootools_full_1.11_packed.js'
			);
		using.register('multi', 
			'dep1.js',
			'dep2.js'
			);
	
		&lt;/script>
	&lt;/head>
	&lt;body>
		&lt;button onclick="using('hello', function() {alert(window.hello_isLoaded());}); ">helloworld.js&lt;/button>
		&lt;button onclick="using('hello2');">no callback&lt;/button>
		&lt;button onclick="document.body.style.cursor='busy';
			using('moo', function() {
				alert('moo! .. random: ' + $random(1,5));
				document.body.style.cursor='default';});">moo tools&lt;/button>
		&lt;button onclick="using('multi', function() {alert('dep1: ' + window.dep1 + ', dep2: ' 
			+ window.dep2);});">multiple dependencies&lt;/button>
	&lt;/body>
&lt;/html>

[helloworld.js]
window.hello_isLoaded = function(){
	window.hello_isLoaded = function() {
		return "I'm already loaded.";
	}
	return "Hello world! I'm loaded!!";
}

[helloworld2.js]
alert ("helloworld2.js loaded");

[dep1.js]
window.dep1 = 'loaded';

[dep2.js]
window.dep2 = 'loaded';

		</pre>
			</blockquote>
</div>
	</body>
</html>
